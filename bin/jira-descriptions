#!/bin/bash
#Created by Sam Gleske
#Sat Nov 20 10:52:00 EST 2021
#MIT Licensed https://github.com/samrocketman/home
#DESCRIPTION
#  Pull an issue description directly from Jira to start filling out a Git
#  commit.  The first issue in the list of issues will be the commit header.
#  This script was written for speedy commit messages with additional context
#  pulled from Jira for reviewers' convenience.
#
#  The output is markdown which is the preferred markup language of GitHub for
#  pull request descriptions.
#USAGE
#  Pass one or more Jira issues and the header is set to the first issue.
#    jira-descriptions JIRA-123 JIRA-1234

# shell settings
set -euo pipefail

# environment variables
export JIRA_BASE_URL JIRA_USER JIRA_PASS JIRA_API_URL
JIRA_BASE_URL="${JIRA_BASE_URL:-}"
JIRA_BASE_URL="${JIRA_BASE_URL%/}"
JIRA_USER="${JIRA_USER:-}"
JIRA_PASS="${JIRA_PASS:-}"
JIRA_NOAUTH="${JIRA_NOAUTH:-false}"
JIRA_API_URL="${JIRA_BASE_URL}/rest/api/2"
JIRA_DESCRIPTION_KEY="${JIRA_DESCRIPTION_KEY:-.fields.summary}"

function helptext() {
  cat <<'EOF'
SYNOPSIS

  jira-issues JIRA_ISSUE [...JIRA_ISSUE]

DESCRIPTION

  Provide a JIRA_ISSUE or multiple JIRA issues (for example JIRA-123 issue
  key).  This script will query the JIRA API, get the description of each
  issue, and output a message intended to be used in a Git commit.  The output
  is markdown which is the preferred markup language of GitHub for pull request
  descriptions.

ENVIRONMENT VARIABLES

         JIRA_BASE_URL - A JIRA frontend URL.  Example: https://issues.jenkins.io
  JIRA_DESCRIPTION_KEY - by default '.fields.summary'.  This is a jq expression
                         walking a parsed result from a single issue.  The
                         result is a JSON response from the JIRA API.  This
                         will likely never change.
           JIRA_NOAUTH - When set to 'true' it will skip requiring a JIRA_USER
                         and JIRA_PASS.  The script will not attempt to
                         authenticate with the JIRA API.
             JIRA_USER - Username used to authenticate with the JIRA API.
             JIRA_PASS - Password used to authenticate with the JIRA API.

ARGUMENTS

  JIRA_ISSUE - A JIRA issue key.  Multiple JIRA issues can be provided as
               additional arguments.
EXAMPLE USAGE

  Pass one or more Jira issues and the header is set to the first issue.

    jira-descriptions JIRA-123 JIRA-1234

  Use an alternate unauthenticated JIRA without changing your environment.

    JIRA_BASE_URL=https://issues.jenkins.io JIRA_NOAUTH=true \
      jira-descriptions JENKINS-1234
EOF
  return 1
}

function preflight_checks() (
  set +e
  return_code=0
  checkutil jq || (( return_code=return_code+1 ))
  checkutil curl || (( return_code=return_code+1 ))
  if [ -z "${JIRA_BASE_URL:-}" ] ||
     ! ( [ "${JIRA_NOAUTH}" = true ] || ([ -n "${JIRA_USER:-}" ] &&
     [ -n "${JIRA_PASS:-}" ]; ); ); then
    echo 'ERROR: all three variables must be set.' >&2
    echo '    - JIRA_BASE_URL' >&2
    echo '    - JIRA_USER' >&2
    echo '    - JIRA_PASS' >&2
    echo '  Set JIRA_NOAUTH=true to skip user and pass variables.' >&2
    echo >&2
    (( return_code=return_code+1 ))
  fi
  if [ "$#" -le 0 ]; then
    echo 'ERROR: Provide one or more JIRA tickets as arguments.' >&2
    echo >&2
    (( return_code=return_code+1 ))
  fi
  if [ "$return_code" -gt 1 ]; then
    echo "ERROR: Multiple errors.  Encountered $return_code errors."
  elif [ "$return_code" -eq 1 ]; then
    echo "ERROR: Encountered $return_code error."
  fi
  return ${return_code}
)

function curl_api() (
  if [ "$JIRA_NOAUTH" = true ]; then
    curl -sSf "${1}"
  else
    curl -sSfu "${JIRA_USER}:${JIRA_PASS}" "${1}"
  fi
)

function description() (
  jq -r "${JIRA_DESCRIPTION_KEY}" < "$1"
)

function checkutil() (
  if ! type -P "$1" &> /dev/null; then
    echo "ERROR: missing utility '$1'." >&2
    echo >&2
    return 1
  fi
  return 0
)

#
# MAIN
#

preflight_checks "$@"
trap '[ -z "${TMP_DIR:-}" ] || rm -rf "${TMP_DIR:-}"' EXIT
TMP_DIR="$(mktemp -d)"

header=true
for x in "$@"; do
  case "$x" in
    -h|--help)
      helptext
      ;;
  esac
  curl_api "${JIRA_API_URL}"/issue/"$x" > "${TMP_DIR}"/"$x"
  if "$header"; then
    echo "[$x]"
    echo
    header=false
  fi
done

# write out markdown description
echo 'See also:'
echo
for issue in "${TMP_DIR}"/*;do
  echo "- [${issue##*/}][${issue##*/}] $(description "$issue")"
done
echo

# write out markdown links
for issue in "${TMP_DIR}"/*;do
  echo "[${issue##*/}]: ${JIRA_BASE_URL}/browse/${issue##*/}"
done
